{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport * as countriesLib from 'i18n-iso-countries';\nimport { LocalStorageService } from './localstorge.service';\nimport { Router } from '@angular/router';\nimport { UsersFacade } from '../state/users.facade';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./localstorge.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../state/users.facade\";\nexport let UsersService = /*#__PURE__*/(() => {\n  class UsersService {\n    constructor(http, token, router, userFacade) {\n      this.http = http;\n      this.token = token;\n      this.router = router;\n      this.userFacade = userFacade;\n      this.apiUserUrl = environment.apiUrl + 'users';\n    }\n    getUsers() {\n      return this.http.get(`${this.apiUserUrl}`);\n    }\n    createUser(user) {\n      return this.http.post(`${this.apiUserUrl} `, user);\n    }\n    deleteUser(userId) {\n      return this.http.delete(`${this.apiUserUrl}/${userId}`);\n    }\n    getUser(userId) {\n      return this.http.get(`${this.apiUserUrl}/${userId}`);\n    }\n    updateUser(user) {\n      return this.http.put(`${this.apiUserUrl}/${user.id}`, user);\n    }\n    getCountry(countryKey) {\n      return countriesLib.getName(countryKey, 'en');\n    }\n    getCountries() {\n      return Object.entries(countriesLib.getNames('en', {\n        select: 'official'\n      })).map(entry => {\n        return {\n          id: entry[0],\n          name: entry[1]\n        };\n      });\n    }\n    login(email, password) {\n      return this.http.post(`${this.apiUserUrl}/login`, {\n        email,\n        password\n      });\n    }\n    logOut() {\n      this.token.removeToken();\n      this.router.navigate(['/login']);\n    }\n    initAppSession() {\n      this.userFacade.buildUserSession();\n    }\n    observeCurrentUser() {\n      return this.userFacade.currentUser$;\n    }\n    isCurrentUserAuth() {\n      return this.userFacade.isAuthenticatedUser$;\n    }\n  }\n  UsersService.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.UsersFacade));\n  };\n  UsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}