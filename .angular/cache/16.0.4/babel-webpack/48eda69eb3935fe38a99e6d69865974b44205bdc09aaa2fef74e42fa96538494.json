{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport const CART_KEY = 'cart';\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    // BehaviorSubject we use it here because the the subject execution is after the constrictor\n    // So the BehaviorSubject can execution any time i want him to be executed with mentioned\n    // the function that will be executed whit it.\n    constructor() {\n      this.cart$ = new BehaviorSubject(this.getCart());\n    }\n    initCartLocalStorage() {\n      const cart = this.getCart();\n      if (!cart) {\n        const initCart = {\n          items: []\n        };\n        const initCartJson = JSON.stringify(initCart);\n        localStorage.setItem(CART_KEY, initCartJson);\n      } else {\n        this.cart$.next(cart);\n      }\n    }\n    getCart() {\n      const cartJsonString = localStorage.getItem(CART_KEY);\n      const cart = JSON.parse(cartJsonString);\n      return cart;\n    }\n    setCartItem(cartItem, updateCartItem) {\n      const cart = this.getCart();\n      const cartItemExist = cart.items.find(item => item.productId === cartItem.productId);\n      if (cartItemExist) {\n        cart.items.map(item => {\n          if (item.productId === cartItem.productId) {\n            if (updateCartItem) {\n              item.quantity = cartItem.quantity;\n            } else {\n              item.quantity = item.quantity + cartItem.quantity;\n            }\n            return item;\n          }\n        });\n      } else {\n        cart.items.push(cartItem);\n      }\n      const cartJson = JSON.stringify(cart);\n      localStorage.setItem(CART_KEY, cartJson);\n      this.cart$.next(cart);\n      return cart;\n    }\n    emptyCart() {\n      const intialCart = {\n        items: []\n      };\n      const intialCartJson = JSON.stringify(intialCart);\n      localStorage.setItem(CART_KEY, intialCartJson);\n      this.cart$.next(intialCart);\n    }\n    deleteCartItem(productId) {\n      const cart = this.getCart();\n      const newCart = cart.items.filter(item => item.productId !== productId);\n      cart.items = newCart;\n      const cartJsonString = JSON.stringify(cart);\n      localStorage.setItem(CART_KEY, cartJsonString);\n      this.cart$.next(cart);\n    }\n  }\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}