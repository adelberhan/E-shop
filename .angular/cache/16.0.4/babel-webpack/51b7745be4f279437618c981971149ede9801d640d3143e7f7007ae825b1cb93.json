{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { switchMap } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { StripeService } from 'ngx-stripe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-stripe\";\nexport let OrdersService = /*#__PURE__*/(() => {\n  class OrdersService {\n    constructor(http, stripeService) {\n      this.http = http;\n      this.stripeService = stripeService;\n      this.apiURLOrders = environment.apiUrl + 'orders';\n      this.apiURLProducts = environment.apiUrl + 'products';\n    }\n    getOrders() {\n      return this.http.get(this.apiURLOrders);\n    }\n    getOrder(OrderId) {\n      return this.http.get(`${this.apiURLOrders}/${OrderId}`);\n    }\n    createOrder(Order) {\n      return this.http.post(this.apiURLOrders, Order);\n    }\n    updateOrder(orderStatus, orderId) {\n      return this.http.put(`${this.apiURLOrders}/${orderId}`, orderStatus);\n    }\n    deleteOrder(OrderId) {\n      return this.http.delete(`${this.apiURLOrders}/${OrderId}`);\n    }\n    getProduct(ProductId) {\n      return this.http.get(`${this.apiURLProducts}/${ProductId}`);\n    }\n    createCheckOutSession(orderItem) {\n      return this.http.post(`${this.apiURLOrders}/create-checkout-session`, orderItem).pipe(switchMap(session => {\n        return this.stripeService.redirectToCheckout({\n          sessionId: session.id\n        });\n      }));\n    }\n    cashOrderData(order) {\n      localStorage.setItem('orderItems', JSON.stringify(order));\n    }\n    getCashedOrderData() {\n      return JSON.parse(localStorage.getItem('orderItems'));\n    }\n    removeCashedOrderData() {\n      localStorage.removeItem('orderItems');\n    }\n  }\n  OrdersService.ɵfac = function OrdersService_Factory(t) {\n    return new (t || OrdersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StripeService));\n  };\n  OrdersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdersService,\n    factory: OrdersService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrdersService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}