{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport * as UsersActions from './users.actions';\nimport { catchError, of, concatMap, map } from 'rxjs';\nimport { LocalStorageService } from '../services/localstorge.service';\nimport { UsersService } from '../services/user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/localstorge.service\";\nimport * as i3 from \"../services/user.service\";\nexport let UsersEffects = /*#__PURE__*/(() => {\n  class UsersEffects {\n    constructor(actions$, localStorage, usersService) {\n      this.actions$ = actions$;\n      this.localStorage = localStorage;\n      this.usersService = usersService;\n      // * always the effects are suffixed with the dollar sign, as you see here.\n      this.buildUserSession$ = createEffect(() => this.actions$.pipe(ofType(UsersActions.buildUserSession), concatMap(() => {\n        if (this.localStorage.isValidToken()) {\n          // * token is valid\n          const userId = this.localStorage.getIdFromToken();\n          if (userId) {\n            return this.usersService.getUser(userId).pipe(map(user => {\n              return UsersActions.buildUserSessionSuccess({\n                user: user\n              });\n            }),\n            // *  if there is error with the API\n            catchError(() => of(UsersActions.buildUserSessionFailure())));\n          } else {\n            // * In case there is no user ID\n            return of(UsersActions.buildUserSessionFailure());\n          }\n        } else {\n          // * token is not valid\n          // * observable of some action\n          return of(UsersActions.buildUserSessionFailure());\n        }\n      })));\n    }\n  }\n  UsersEffects.ɵfac = function UsersEffects_Factory(t) {\n    return new (t || UsersEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.UsersService));\n  };\n  UsersEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersEffects,\n    factory: UsersEffects.ɵfac\n  });\n  return UsersEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}