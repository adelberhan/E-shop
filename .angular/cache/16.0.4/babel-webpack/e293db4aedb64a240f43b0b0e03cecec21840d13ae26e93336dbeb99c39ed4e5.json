{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as UsersActions from './users.actions';\nexport const USERS_FEATURE_KEY = 'users';\n// * Init value for the state *//\nexport const initialUserState = {\n  user: null,\n  isAuthenticated: false\n};\n// export const usersAdapter: EntityAdapter<UsersEntity> =\n//   createEntityAdapter<UsersEntity>();\n// export const initialUsersState: usersState = usersAdapter.getInitialState({\n//   // set initial required properties\n//   loaded: false,\n// });\nexport const usersReducer = createReducer(initialUserState, on(UsersActions.buildUserSession, state => ({\n  ...state\n})),\n// ...state Means we are going to update this state not going to change the whole state.\n//This is called  immutable.\non(UsersActions.buildUserSessionSuccess, (state, action) => ({\n  ...state,\n  user: action.user,\n  isAuthenticated: true\n})), on(UsersActions.buildUserSessionFailure, state => ({\n  ...state,\n  user: null,\n  isAuthenticated: false\n})));\nexport function reducer(state, action) {\n  return usersReducer(state, action);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}